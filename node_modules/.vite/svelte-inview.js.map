{
  "version": 3,
  "sources": ["../svelte-inview/dist/index.mjs"],
  "sourcesContent": ["const defaultOptions = {\r\n    root: null,\r\n    rootMargin: '0px',\r\n    threshold: 0,\r\n    unobserveOnEnter: false,\r\n};\r\nconst createEvent = (name, detail) => new CustomEvent(name, { detail });\r\nfunction inview(node, options = {}) {\r\n    const { root, rootMargin, threshold, unobserveOnEnter } = Object.assign(Object.assign({}, defaultOptions), options);\r\n    let prevPos = {\r\n        x: undefined,\r\n        y: undefined,\r\n    };\r\n    let scrollDirection = {\r\n        vertical: undefined,\r\n        horizontal: undefined,\r\n    };\r\n    if (typeof IntersectionObserver !== 'undefined' && node) {\r\n        const observer = new IntersectionObserver((entries, _observer) => {\r\n            const observe = _observer.observe;\r\n            const unobserve = _observer.unobserve;\r\n            entries.forEach((singleEntry) => {\r\n                if (prevPos.y > singleEntry.boundingClientRect.y) {\r\n                    scrollDirection.vertical = 'up';\r\n                }\r\n                else {\r\n                    scrollDirection.vertical = 'down';\r\n                }\r\n                if (prevPos.x > singleEntry.boundingClientRect.x) {\r\n                    scrollDirection.horizontal = 'left';\r\n                }\r\n                else {\r\n                    scrollDirection.horizontal = 'right';\r\n                }\r\n                prevPos = {\r\n                    y: singleEntry.boundingClientRect.y,\r\n                    x: singleEntry.boundingClientRect.x,\r\n                };\r\n                const detail = {\r\n                    inView: singleEntry.isIntersecting,\r\n                    entry: singleEntry,\r\n                    scrollDirection,\r\n                    observe,\r\n                    unobserve,\r\n                };\r\n                node.dispatchEvent(createEvent('change', detail));\r\n                if (singleEntry.isIntersecting) {\r\n                    node.dispatchEvent(createEvent('enter', detail));\r\n                    unobserveOnEnter && _observer.unobserve(node);\r\n                }\r\n                else {\r\n                    node.dispatchEvent(createEvent('leave', detail));\r\n                }\r\n            });\r\n        }, {\r\n            root,\r\n            rootMargin,\r\n            threshold,\r\n        });\r\n        // This dispatcher has to be wrapped in setTimeout, as it won't work otherwise.\r\n        // Not sure why is it happening, maybe a callstack has to pass between the listeners?\r\n        // Definitely something to investigate to understand better.\r\n        setTimeout(() => {\r\n            node.dispatchEvent(createEvent('init', { observer, node }));\r\n        }, 0);\r\n        observer.observe(node);\r\n        return {\r\n            destroy() {\r\n                observer.unobserve(node);\r\n            },\r\n        };\r\n    }\r\n}\n\nexport { inview };\n"],
  "mappings": ";AAAA,IAAM,iBAAiB;AAAA,EACnB,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,kBAAkB;AAAA;AAEtB,IAAM,cAAc,CAAC,MAAM,WAAW,IAAI,YAAY,MAAM,EAAE;AAC9D,gBAAgB,MAAM,UAAU,IAAI;AAChC,QAAM,EAAE,MAAM,YAAY,WAAW,qBAAqB,OAAO,OAAO,OAAO,OAAO,IAAI,iBAAiB;AAC3G,MAAI,UAAU;AAAA,IACV,GAAG;AAAA,IACH,GAAG;AAAA;AAEP,MAAI,kBAAkB;AAAA,IAClB,UAAU;AAAA,IACV,YAAY;AAAA;AAEhB,MAAI,OAAO,yBAAyB,eAAe,MAAM;AACrD,UAAM,WAAW,IAAI,qBAAqB,CAAC,SAAS,cAAc;AAC9D,YAAM,UAAU,UAAU;AAC1B,YAAM,YAAY,UAAU;AAC5B,cAAQ,QAAQ,CAAC,gBAAgB;AAC7B,YAAI,QAAQ,IAAI,YAAY,mBAAmB,GAAG;AAC9C,0BAAgB,WAAW;AAAA,eAE1B;AACD,0BAAgB,WAAW;AAAA;AAE/B,YAAI,QAAQ,IAAI,YAAY,mBAAmB,GAAG;AAC9C,0BAAgB,aAAa;AAAA,eAE5B;AACD,0BAAgB,aAAa;AAAA;AAEjC,kBAAU;AAAA,UACN,GAAG,YAAY,mBAAmB;AAAA,UAClC,GAAG,YAAY,mBAAmB;AAAA;AAEtC,cAAM,SAAS;AAAA,UACX,QAAQ,YAAY;AAAA,UACpB,OAAO;AAAA,UACP;AAAA,UACA;AAAA,UACA;AAAA;AAEJ,aAAK,cAAc,YAAY,UAAU;AACzC,YAAI,YAAY,gBAAgB;AAC5B,eAAK,cAAc,YAAY,SAAS;AACxC,8BAAoB,UAAU,UAAU;AAAA,eAEvC;AACD,eAAK,cAAc,YAAY,SAAS;AAAA;AAAA;AAAA,OAGjD;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA;AAKJ,eAAW,MAAM;AACb,WAAK,cAAc,YAAY,QAAQ,EAAE,UAAU;AAAA,OACpD;AACH,aAAS,QAAQ;AACjB,WAAO;AAAA,MACH,UAAU;AACN,iBAAS,UAAU;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
